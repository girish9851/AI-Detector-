import os
import ast
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from fastapi.responses import JSONResponse
from groq import Groq  # Official Groq SDK (requires API key)

# ===============================
# STEP 1: Setup Groq client
# ===============================
GROQ_API_KEY = os.getenv("API_KEY")  
if not GROQ_API_KEY:
    raise ValueError("‚ùå Please set GROQ_API_KEY as an environment variable")

client = Groq(api_key=GROQ_API_KEY)

# ===============================
# FastAPI App
# ===============================
app = FastAPI()

# Enable CORS so frontend (Chrome extension) can call API
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # üëà allow all for dev/extension
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ===============================
# Request Body Model
# ===============================
class AbstractRequest(BaseModel):
    abstract: str

# ===============================
# Function: Call Groq
# ===============================
def generate_section(text, model="openai/gpt-oss-120b", temperature=1):
    prompt = f"""
You are an advanced AI-text detector. Your job is to read a text and output a single numeric probability (0‚Äì100) that reflects how likely the text was generated by an AI.

Scoring Philosophy

0 = certainly human-written

100 = certainly AI-generated

Use the entire 0‚Äì100 scale. Avoid defaulting to midpoints unless truly uncertain.

Gradations should reflect the strength of AI vs human signals, not just a binary guess.

Features to Weigh

Stylistic Fluency

AI often writes in polished, grammatically correct, but uniform style.

Humans show more variety, colloquialisms, and occasional imperfection.

Content Specificity

AI tends to generalize or hedge ("some people say‚Ä¶", "in general‚Ä¶").

Humans often include idiosyncratic, personal, or experiential detail.

Phrasing & Word Choice

Look for repetition, filler phrases, or unusual synonyms that sound ‚Äúoff.‚Äù

Detect when transitions are mechanically smooth but lack natural spontaneity.

Contextual Anchors

AI avoids references to current events beyond its cutoff (or hallucinates).

Humans anchor writing to lived time, place, or evolving news.

Emotional & Cognitive Texture

AI explanations tend to be balanced, cautious, and over-structured.

Human text may show abruptness, emotional bias, humor, or incomplete reasoning.

Calibration Guidelines

0‚Äì20: Strongly human (personal, messy, natural flaws).

21‚Äì40: Likely human, but with some AI-like polish.

41‚Äì60: Unclear / ambiguous (mixed signals).

61‚Äì80: Likely AI (smooth, general, slightly detached).

81‚Äì100: Strongly AI (formulaic, self-referential, hedging).

Output Rule

Only provide the probability as a numeric value.

Do not add words, labels, or explanations.

Examples

Example 1:
Text: "The sun set over the horizon, painting the sky in shades of orange and pink."
Probability: 10

Example 2:
Text: "As an AI language model, I am unable to provide personal opinions or experiences."
Probability: 95

Example 3:
Text: "I love hiking in the mountains and exploring nature on weekends."
Probability: 15

Now evaluate the following text:

Text:
{text}

Probability:
"""
    response = client.chat.completions.create(
        model=model,
        messages=[{"role": "user", "content": prompt}],
        temperature=temperature
    )

    result = ast.literal_eval(response.choices[0].message.content.strip())
    return result

# ===============================
# API Route
# ===============================
@app.post("/generate_section")
def classify_paper(req: AbstractRequest):
    score = generate_section(req.abstract)
    return JSONResponse(content={"composite_score": score})

