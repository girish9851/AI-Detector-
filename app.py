import os
import ast
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from fastapi.responses import JSONResponse
from groq import Groq  # Official Groq SDK (requires API key)

# ===============================
# STEP 1: Setup Groq client
# ===============================
GROQ_API_KEY = os.getenv("API_KEY")  
if not GROQ_API_KEY:
    raise ValueError("‚ùå Please set GROQ_API_KEY as an environment variable")

client = Groq(api_key=GROQ_API_KEY)

# ===============================
# FastAPI App
# ===============================
app = FastAPI()

# Enable CORS so frontend (Chrome extension) can call API
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # üëà allow all for dev/extension
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ===============================
# Request Body Model
# ===============================
class AbstractRequest(BaseModel):
    abstract: str

# ===============================
# Function: Call Groq
# ===============================
def generate_section(text, model="llama3-70b-8192", temperature=0.2):
    prompt = f"""
You are an AI detector. Your task is to read a text and assign a probability score (0 to 100) representing how likely it is that the text was generated by an AI. Only provide the probability as a numeric value, do not add explanations.

Examples:

Example 1:
Text: "The sun set over the horizon, painting the sky in shades of orange and pink."
Probability: 10

Example 2:
Text: "As an AI language model, I am unable to provide personal opinions or experiences."
Probability: 95

Example 3:
Text: "I love hiking in the mountains and exploring nature on weekends."
Probability: 15

Now evaluate the following text:

Text:
{text}

Probability:
"""
    response = client.chat.completions.create(
        model=model,
        messages=[{"role": "user", "content": prompt}],
        temperature=temperature
    )

    result = ast.literal_eval(response.choices[0].message.content.strip())
    return result

# ===============================
# API Route
# ===============================
@app.post("/generate_section")
def classify_paper(req: AbstractRequest):
    score = generate_section(req.abstract)
    return JSONResponse(content={"composite_score": score})

